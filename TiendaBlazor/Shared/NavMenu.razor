<div class="top-row ps-3 navbar navbar-dark">
    <div class="container-fluid">
        <a class="navbar-brand" href="">
            <img src="/img/logo.png" alt="Logo" style="height: 50px;">
        </a>
        <button title="Navigation menu" class="navbar-toggler" @onclick="ToggleNavMenu">
            <span class="navbar-toggler-icon"></span>
        </button>
    </div>
</div>

<div class="@NavMenuCssClass nav-scrollable" @onclick="ToggleNavMenu">
    <nav class="flex-column">
        @if (isAdmin)
        {
            <div class="nav-item px-3">
                <NavLink class="nav-link" href="admin-productos">
                    <span class="" aria-hidden="true"></span> Productos
                </NavLink>
            </div>
            <div class="nav-item px-3">
                <NavLink class="nav-link" href="admin-agregar">
                    <span class="" aria-hidden="true"></span> Agregar Productos
                </NavLink>
            </div>
        }
        @if (isCliente)
        {
            <div class="nav-item px-3">
                <NavLink class="nav-link" href="cliente-page">
                    <span class="" aria-hidden="true"></span> Productos
                </NavLink>
            </div>
        }

        <div class="nav-item px-3">
            <NavLink href="#" class="nav-link" @onclick="LogoutAsync">
                Cerrar Sesión
            </NavLink>
        </div>
    </nav>
</div>

@code {
    private bool collapseNavMenu = true;
    private bool isAdmin = false;
    private bool isCliente = false;

    private string? NavMenuCssClass => collapseNavMenu ? "collapse" : null;

    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }

    [Inject]
    private CustomAuthenticationStateProvider AuthenticationStateProvider { get; set; }

    [Inject]
    private NavigationManager Navigation { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var authState = await authenticationStateTask;
        var user = authState.User;

        if (user.Identity != null && user.Identity.IsAuthenticated)
        {
            isAdmin = user.IsInRole("Admin");
            isCliente = user.IsInRole("Cliente");
        }
    }

    private void ToggleNavMenu()
    {
        collapseNavMenu = !collapseNavMenu;
    }

    private async Task LogoutAsync()
    {
        AuthenticationStateProvider.MarkUserAsLoggedOut();
        await Task.Delay(100); // Pequeño retraso para asegurar que el estado se actualiza
        Navigation.NavigateTo("/login", forceLoad: true);
    }
}
